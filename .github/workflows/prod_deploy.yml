name: prod_deployment

on:
  push:
    branches:
      - main

concurrency: beta-deployment

env:
  REGISTRY: ${{ secrets.DIGITALOCEAN_CONTAINER_URL }}
  TAG: prod
  SERVER_IMAGE_NAME: "orientation-server"
  CLIENT_IMAGE_NAME: "orientation-client"
  DIGITALOCEAN_API_KEY: ${{ secrets.DIGITALOCEAN_API_KEY }}
  USER_DATA: ${{ secrets.CLOUD_INIT }}
  NAME: prod-droplet
  REGION: ${{ secrets.REGION }}
  IP: ${{ secrets.PROD_IP }}

jobs:
  build_server:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build server image
        run: cd server && docker build -t $(echo $REGISTRY)/$(echo $SERVER_IMAGE_NAME):prod -f beta.Dockerfile .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Remove old server image
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $SERVER_IMAGE_NAME)")" ]; then doctl registry repository delete-tag $(echo $SERVER_IMAGE_NAME) $(echo $TAG) --force; else echo "No repository"; fi


      - name: Push server image to container registry
        run: docker push $(echo $REGISTRY)/$(echo $SERVER_IMAGE_NAME):prod

  build_client:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build client image
        run: cd client && docker build -t $(echo $REGISTRY)/$(echo $CLIENT_IMAGE_NAME):prod -f prod.Dockerfile .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Remove old client image
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $CLIENT_IMAGE_NAME)")" ]; then doctl registry repository delete-tag $(echo $CLIENT_IMAGE_NAME) $(echo $TAG) --force; else echo "No repository"; fi

      - name: Push client image to container registry
        run: docker push $(echo $REGISTRY)/$(echo $CLIENT_IMAGE_NAME):prod

  deploy:
    runs-on: ubuntu-20.04
    needs: [build_server, build_client]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.3'
      - name: Run deployment script
        run: |
          cd deploy
          go version
          go get -d ./...
          go run main.go
